
#include <Wire.h>
#include <Adafruit_SSD1306.h>
#include <Adafruit_GFX.h>
#include <Adafruit_MLX90614.h>
#include "MAX30102_PulseOximeter.h"


#define BUZZER_PIN 7
#define OLED_RESET -1
#define WIDTH 128
#define HEIGHT 32
#define REPORTING_PERIOD_MS     1000

Adafruit_MLX90614 temp_sensor = Adafruit_MLX90614();

Adafruit_SSD1306 display(WIDTH, HEIGHT, &Wire, OLED_RESET);
PulseOximeter pox;

uint32_t tsLastReport = 0;
int heart_rate = 0, oxygen_level = 0, old_heart_rate = 0, stress_level = 0;




const unsigned char PROGMEM uitm_logo[] = {
// 'image_2024-05-08_151545709', 128x32px
0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x68, 0xf1, 0x08, 0xf4, 0x60, 0x40, 0x60, 0x40, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x04, 0x01, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 
0xff, 0xff, 0xf0, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x02, 0xc3, 0x04, 0x80, 0x04, 0x04, 0x00, 0x00, 
0xff, 0xfe, 0x00, 0x07, 0xff, 0xf0, 0x00, 0x50, 0x0c, 0x00, 0x0b, 0x00, 0x06, 0x00, 0x00, 0x00, 
0xff, 0xc0, 0x00, 0x00, 0x7f, 0xf0, 0x02, 0x11, 0x80, 0x04, 0x10, 0xc2, 0x2b, 0xff, 0x82, 0x0c, 
0xff, 0xfe, 0x00, 0x07, 0xff, 0xf0, 0x00, 0x4a, 0x88, 0x82, 0x1a, 0x21, 0x20, 0x40, 0x23, 0x40, 
0xff, 0xff, 0xf9, 0xff, 0xff, 0xf0, 0x03, 0x00, 0x21, 0x45, 0x10, 0x00, 0x8c, 0x01, 0xa2, 0x00, 
0xff, 0xff, 0x7f, 0xef, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0xff, 0xff, 0xe0, 0x7f, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0xff, 0xff, 0xbf, 0xdf, 0xff, 0xf0, 0x0c, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 
0xff, 0xfe, 0xf0, 0xf7, 0xff, 0xf0, 0x0c, 0x23, 0x90, 0x98, 0x44, 0x22, 0x12, 0x11, 0x24, 0x90, 
0xff, 0xff, 0xce, 0x7f, 0xff, 0xf0, 0x0c, 0x22, 0xd0, 0x88, 0x84, 0x82, 0x13, 0x81, 0x04, 0x10, 
0xff, 0xff, 0x3f, 0xcf, 0xff, 0xf0, 0x0c, 0x22, 0x70, 0x8c, 0x84, 0x82, 0xc0, 0x71, 0x04, 0x10, 
0xff, 0xff, 0xf0, 0xff, 0xff, 0xf0, 0x04, 0x22, 0x30, 0x87, 0x04, 0x12, 0x62, 0x09, 0x04, 0x10, 
0xff, 0x8f, 0x9f, 0x1f, 0x1f, 0xf0, 0x03, 0xc7, 0x13, 0xc2, 0x0f, 0xe7, 0x1a, 0xf3, 0x8e, 0x38, 
0xff, 0xf0, 0x79, 0xe0, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0xff, 0xff, 0x06, 0x0f, 0xff, 0xf0, 0x0f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0xff, 0x81, 0xf1, 0xf8, 0x1f, 0xf0, 0x19, 0x2f, 0xe7, 0x3b, 0x8c, 0x38, 0x70, 0x0e, 0x03, 0x87, 
0xff, 0xf8, 0x3f, 0xc1, 0xff, 0xf0, 0x01, 0x04, 0x12, 0x21, 0xc8, 0x82, 0x30, 0x61, 0x98, 0x62, 
0xfe, 0x7f, 0x00, 0x0f, 0xc7, 0xf0, 0x01, 0x04, 0x82, 0x81, 0x69, 0x81, 0x30, 0x40, 0xd0, 0x02, 
0xf8, 0x03, 0xe0, 0x7c, 0x01, 0xf0, 0x01, 0x04, 0x83, 0x41, 0x39, 0x81, 0x30, 0x40, 0xd0, 0x62, 
0xf3, 0xe0, 0x04, 0x00, 0x78, 0xe0, 0x01, 0x04, 0x12, 0x31, 0x18, 0x82, 0x31, 0x21, 0x98, 0x62, 
0x7f, 0xe0, 0x3c, 0x00, 0x7f, 0xe0, 0x03, 0x8f, 0xe7, 0x3b, 0x88, 0x38, 0x7e, 0x1e, 0x03, 0x87, 
0x7f, 0x83, 0x84, 0x1c, 0x1f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x3c, 0x1f, 0xe0, 0x7f, 0x83, 0xc0, 0x0c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x01, 0xff, 0x1f, 0x1f, 0xf0, 0x00, 0x0e, 0x38, 0x30, 0xce, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x0f, 0xfc, 0x7f, 0xe3, 0xfe, 0x00, 0x0a, 0x38, 0x50, 0xc2, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x07, 0xe3, 0xff, 0xfc, 0x7c, 0x00, 0x0b, 0x58, 0x98, 0xfc, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x01, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x09, 0xd8, 0x88, 0xc8, 0x46, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x7f, 0xff, 0xff, 0xe0, 0x00, 0x0c, 0x99, 0x0c, 0xc6, 0x43, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x0f, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x01, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};


void onBeatDetected()
{
  if (millis() - tsLastReport > REPORTING_PERIOD_MS) {
        heart_rate = int(pox.getHeartRate());
      
      oxygen_level = int(pox.getSpO2());



        if (heart_rate > old_heart_rate)  {
          stress_level = heart_rate - old_heart_rate;
        } else  {
          stress_level = old_heart_rate - heart_rate;
        }
        old_heart_rate = heart_rate;

        
        if (stress_level > 50)  {
          digitalWrite(BUZZER_PIN, 1); 
        } else  {
          digitalWrite(BUZZER_PIN, 0);
        }

   
         
        tsLastReport = millis();
  }
}
 
void setup()
{
    pinMode(BUZZER_PIN, OUTPUT);
    Serial.begin(115200);
    Serial.print("Initializing..");

    if (!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) {
      Serial.println("display error");
    } else  {
      Serial.println("display on!");
      display.clearDisplay();
      display.setCursor(0, 0);
        display.setTextColor(WHITE);
        display.setTextSize(2);
        display.drawBitmap(0, 0, uitm_logo, 128, 32, WHITE);
        display.display();
        delay(3000);
        display.clearDisplay();
        display.print("Developed by Wanz");
        display.display();
    }

    delay(3000);
    if (!pox.begin()) {
        Serial.println("FAILED");
        for(;;);
    } else {
        Serial.println("SUCCESS");
    }

    
    
    if (!temp_sensor.begin()) {
      Serial.println("temp sensor error");
    } else  {
      Serial.println("Temp sensor on!");
    }
    // pox.setIRLedCurrent(MAX30102_LED_CURR_7_6MA);
    pox.setIRLedCurrent(208);
    pox.setOnBeatDetectedCallback(onBeatDetected);

    

        // display.clearDisplay();
}
 
void loop()
{
    pox.update();
        display.setCursor(0, 0);
        display.setTextColor(WHITE);
        display.setTextSize(1);

        display.print("Body Temp: ");
        display.print(temp_sensor.readObjectTempC());
        display.println(" C");

        display.print("Heart Rate: ");
        display.print(heart_rate);
        display.println(" BPM");

        display.print("Blood Oxy: ");
        display.print(oxygen_level);
        display.println("%");
        display.print("Stress Lvl: ");
        display.print(stress_level);
        display.println("%");

        display.display();
        display.clearDisplay();
}
